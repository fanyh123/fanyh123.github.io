<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://note.geekju.cn/</id>
    <title>GeekNotes</title>
    <updated>2019-08-27T08:42:25.863Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://note.geekju.cn/"/>
    <link rel="self" href="http://note.geekju.cn//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>http://note.geekju.cn//images/avatar.png</logo>
    <icon>http://note.geekju.cn//favicon.ico</icon>
    <rights>All rights reserved 2019, GeekNotes</rights>
    <entry>
        <title type="html"><![CDATA[MyBatis 中 @Param 注解的四种使用场景]]></title>
        <id>http://note.geekju.cn//post/mybatis-zhong-param-zhu-jie-de-si-chong-shi-yong-chang-jing</id>
        <link href="http://note.geekju.cn//post/mybatis-zhong-param-zhu-jie-de-si-chong-shi-yong-chang-jing">
        </link>
        <updated>2019-07-25T09:50:43.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>第一种：方法有多个参数，需要 @Param 注解</li>
</ul>
<pre><code>@Mapper
public interface UserMapper {
    Integer insert(@Param(&quot;username&quot;) String username, @Param(&quot;address&quot;) String address);
}
</code></pre>
<p>对应的 XML 文件如下：</p>
<pre><code>&lt;insert id=&quot;insert&quot; parameterType=&quot;org.javaboy.helloboot.bean.User&quot;&gt;
    insert into user (username,address) values (#{username},#{address});
&lt;/insert&gt;
</code></pre>
<p>这是最常见的需要添加 @Param 注解的场景。</p>
<ul>
<li>第二种：方法参数要取别名，需要 @Param 注解<br>
当需要给参数取一个别名的时候，我们也需要 @Param 注解，例如方法定义如下：</li>
</ul>
<pre><code>@Mapper
public interface UserMapper {
    User getUserByUsername(@Param(&quot;name&quot;) String username);
}
</code></pre>
<p>对应的 XML 文件如下：</p>
<pre><code>&lt;select id=&quot;getUserByUsername&quot; parameterType=&quot;org.javaboy.helloboot.bean.User&quot;&gt;
    select * from user where username=#{name};
&lt;/select&gt;
</code></pre>
<p>这种需求不多</p>
<ul>
<li>第三种：XML 中的 SQL 使用了 $ ，那么参数中也需要 @Param 注解<br>
<strong>会有注入漏洞的问题，但是有的时候你不得不使用 符号</strong>，例如要传入列名或者表名的时候，这个时候必须要添加 @Param 注解，例如：</li>
</ul>
<pre><code>@Mapper
public interface UserMapper {
    List&lt;User&gt; getAllUsers(@Param(&quot;order_by&quot;)String order_by);
}
</code></pre>
<p>对应的 XML 定义如下：</p>
<pre><code>&lt;select id=&quot;getAllUsers&quot; resultType=&quot;org.javaboy.helloboot.bean.User&quot;&gt;
    select * from user
    &lt;if test=&quot;order_by!=null and order_by!=''&quot;&gt;
        order by ${order_by} desc
    &lt;/if&gt;
&lt;/select&gt;
</code></pre>
<ul>
<li>第四种:那就是动态 SQL ，也是我在工作中踩过的坑如果在动态 SQL 中使用了参数作为变量，那么也需要 @Param 注解，即使你只有一个参数。<br>
如果我们在动态 SQL 中用到了 参数作为判断条件，那么也是一定要加 @Param 注解的，例如如下方法：</li>
</ul>
<pre><code>@Mapper
public interface UserMapper {
    List&lt;User&gt; getUserById(@Param(&quot;id&quot;)Integer id);
}
</code></pre>
<p>定义出来的 SQL 如下：</p>
<pre><code>&lt;select id=&quot;getUserById&quot; resultType=&quot;org.javaboy.helloboot.bean.User&quot;&gt;
    select * from user
    &lt;if test=&quot;id!=null&quot;&gt;
        where id=#{id}
    &lt;/if&gt;
&lt;/select&gt;
</code></pre>
<p>这种情况，即使只有一个参数，也需要添加 @Param 注解，而这种情况却经常被人忽略！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[配置frp实现内网穿透]]></title>
        <id>http://note.geekju.cn//post/pei-zhi-frp-shi-xian-nei-wang-chuan-tou</id>
        <link href="http://note.geekju.cn//post/pei-zhi-frp-shi-xian-nei-wang-chuan-tou">
        </link>
        <updated>2019-07-22T03:06:38.000Z</updated>
        <content type="html"><![CDATA[<p>一、frp的作用</p>
<p>利用处于内网或防火墙后的机器，对外网环境提供 http 或 https 服务。<br>
对于 http, https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个80端口。<br>
利用处于内网或防火墙后的机器，对外网环境提供 tcp 和 udp 服务，例如在家里通过 ssh 访问处于公司内网环境内的主机。<br>
二、配置说明</p>
<p>1、实现功能</p>
<p>（1）外网通过ssh访问内网机器</p>
<p>（2）自定义绑定域名访问内网web服务</p>
<p>2、配置前准备</p>
<p>（1）公网服务器1台</p>
<p>（2）内网服务器1台（我这里演示的是linux环境，win10上面vmware安装的centos7）</p>
<p>（3）公网服务器绑定域名1个（实现二1中（1）功能不需要公网服务器绑定域名，二1中（2）功能必须需要公网服务器绑定域名）</p>
<p>（4）内网服务器部署一个web服务，可以用tomcat模拟，这里就不演示了</p>
<p>三、安装frp</p>
<p>1、公网服务器与内网服务器都需要下载frp进行安装，公网服务器（服务端）配置关注步骤6,内网服务器（客户端）关注步骤7</p>
<p>2、下载地址是https://github.com/fatedier/frp/releases，下载linux版本frp_0.13.0_linux_amd64.tar.gz，个人感觉下载速度有点慢，</p>
<p><code>也可以这样选择下载wget https://github.com/fatedier/frp/releases/download/v0.13.0/frp_0.13.0_linux_amd64.tar.gz</code><br>
3、新建目录mkdir -p /usr/local/frp，上传frp_0.13.0_linux_amd64.tar.gz至linux服务器该目录下</p>
<p>4、解压tar -zxvf  frp_0.13.0_linux_amd64.tar.gz</p>
<p>5、进入解压目录cd frp_0.13.0_linux_amd64，这里主要关注4个文件，分别是frpc、frpc.ini和frps、frps.ini，前者两个文件是客户端所关注文件，后者两个文件是服务端所关注两个文件。</p>
<p>6、配置服务端（公网服务器），首先删掉frpc、frpc.ini两个文件，然后再进行配置，vi ./frps.ini，</p>
<pre><code>[common]
bind_port = 7000           #与客户端绑定的进行通信的端口
vhost_http_port = 6081     #访问客户端web服务自定义的端口号
保存然后启动服务./frps -c ./frps.ini，这是前台启动，后台启动命令为nohup ./frps -c ./frps.ini &amp;
</code></pre>
<p>7、配置客户端（内网服务器），首先删掉frps、frps.ini两个文件,然后再进行配置，vi ./frpc.ini</p>
<pre><code>[common]
server_addr = 120.56.37.48   #公网服务器ip
server_port = 7000            #与服务端bind_port一致
 
#公网通过ssh访问内部服务器
[ssh]
type = tcp              #连接协议
local_ip = 192.168.3.48 #内网服务器ip
local_port = 22         #ssh默认端口号
remote_port = 6000      #自定义的访问内部ssh端口号
 
#公网访问内部web服务器以http方式
[web]
type = http         #访问协议
local_port = 8081   #内网web服务的端口号
custom_domains = frp.xxx.com   #所绑定的公网服务器域名，一级、二级域名都可以
保存然后执行./frpc -c ./frpc.ini启动，这是前台启动，后台启动命令为nohup ./frpc -c ./frpc.ini &amp;
</code></pre>
<p>8、访问方式</p>
<p>（1）外网ssh访问内网服务器（直接使用配置里面数据演示）</p>
<pre><code>				ip：120.56.37.48  port:6000   用户名：linux服务器的用户  密码：linux服务器的密码        或者

				ip：120.56.37.48  port:22   用户名：linux服务器的用户  密码：linux服务器的密码            或者

				ip：frp.xxx.com  port:6000   用户名：linux服务器的用户  密码：linux服务器的密码         或者

				ip：frp.xxx.com  port:22   用户名：linux服务器的用户  密码：linux服务器的密码
</code></pre>
<p>（2）自定义绑定域名访问内网web服务（直接使用配置里面数据演示）<br>
frp.xxx.com:6081<br>
9、进阶,脚本启动客户端或者重载frpc 配置</p>
<pre><code>#!/bin/bash
ps -fe|grep frp |grep -v grep
if [ $? -ne 1 ]
then
nohup /home/frp/frp_0.21.0_linux_arm64/./frpc -c /home/frp/frp_0.21.0_linux_arm64/frpc.ini &gt;/home/logs/frp.log 2&gt;&amp;1 &amp;
echo &quot;frp is start&quot;
tail -f /home/logs/frp.log
else
nohup /home/frp/frp_0.21.0_linux_arm64/./frpc reload -c /home/frp/frp_0.21.0_linux_arm64/frpc.ini &gt;/home/logs/frp.log 2&gt;&amp;1 &amp;
echo &quot;frp is reload&quot;
tail -f /home/logs/frp.log
fi
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则表达式汇总（数字匹配/字符匹配/特殊匹配）]]></title>
        <id>http://note.geekju.cn//post/chang-yong-zheng-ze-biao-da-shi-hui-zong-shu-zi-pi-pei-zi-fu-pi-pei-te-shu-pi-pei</id>
        <link href="http://note.geekju.cn//post/chang-yong-zheng-ze-biao-da-shi-hui-zong-shu-zi-pi-pei-zi-fu-pi-pei-te-shu-pi-pei">
        </link>
        <updated>2019-07-17T03:18:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1校验数字的表达式">1.校验数字的表达式</h1>
<pre><code>1 数字：^[0-9]*$

2 n位的数字：^\d{n}$

3 至少n位的数字：^\d{n,}$

4 m-n位的数字：^\d{m,n}$

5 零和非零开头的数字：^(0|[1-9][0-9]*)$

6 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$

7 带1-2位小数的正数或负数：^(\-)?\d+(\.\d{1,2})?$   

8 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$

9 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$

10 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$

11 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$    

12 非零的负整数：^\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\d*$

13 非负整数：^\d+$ 或 ^[1-9]\d*|0$

14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$

15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$

16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$

17 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$

18 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$

19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$
</code></pre>
<h1 id="2校验字符的表达式">2.校验字符的表达式</h1>
<pre><code> 汉字：^[\u4e00-\u9fa5]{0,}$

2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$

3 长度为3-20的所有字符：^.{3,20}$

4 由26个英文字母组成的字符串：^[A-Za-z]+$

5 由26个大写英文字母组成的字符串：^[A-Z]+$

6 由26个小写英文字母组成的字符串：^[a-z]+$

7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$

8 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$

9 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$

10 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$

11 可以输入含有^%&amp;',;=?$\&quot;等字符：[^%&amp;',;=?$\x22]+

12 禁止输入含有~的字符：[^~\x22]+
</code></pre>
<h1 id="3特殊需求表达式">3.特殊需求表达式</h1>
<pre><code>1 Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$

2 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?

3 InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$

4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$

5 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$

6 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}

7 身份证号(15位、18位数字)：^\d{15}|\d{18}$

8 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$

9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$

10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$

11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$

12 日期格式：^\d{4}-\d{1,2}-\d{1,2}

13 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$

14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$

15 钱的输入格式：

16 1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$

17 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$

18 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$

19 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$

20 5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]{2})?$

21 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$

22 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$

23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$

24 备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里

25 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$

26 中文字符的正则表达式：[\u4e00-\u9fa5]

27 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))

28 空白行的正则表达式：\n\s*\r (可以用来删除空白行)

29 HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)

30 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)

31 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)

32 中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)

33 IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)

34 IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))
</code></pre>
<h1 id="正则附图">正则附图</h1>
<p><img src="http://qiniu.geekju.cn/geekNotes/jpg/1512313400_3286.png" alt=""></p>
<h1 id="应用">应用</h1>
<h2 id="提取字符串中的字母和数字">提取字符串中的字母和数字</h2>
<pre><code>String str = &quot;adsf    adS	DFASFSADF阿德斯防守对方asdfsadf37《？：？@%#￥%#￥%@#$%#@$%^&gt;&lt;?1234&quot;;
		
str = str.replaceAll(&quot;[^a-zA-Z^0-9]&quot;, &quot;&quot;);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Aml(伪派)操作记录--docker实现更多功能]]></title>
        <id>http://note.geekju.cn//post/amlwei-pai-cao-zuo-ji-lu-docker-shi-xian-geng-duo-gong-neng</id>
        <link href="http://note.geekju.cn//post/amlwei-pai-cao-zuo-ji-lu-docker-shi-xian-geng-duo-gong-neng">
        </link>
        <updated>2019-06-06T14:10:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="mysql部署方式">Mysql部署方式</h3>
<pre><code>docker run -it -e 'MYSQL_ROOT_PASSWORD=mq1129'  -e 'MYSQL_DATABASE=fff' -e 'MYSQL_USER=fff' -e 'MYSQL_PASSWORD=ff1129' -p '33006:3306' --name example_mysql
 beercan1989/arm-mysql:lates
</code></pre>
<h3 id="aria2-uifilesmanager部署">Aria2-ui+filesManager部署</h3>
<pre><code>docker run -d --name aria2-ui -p 680:80 -p 6880:6800 -v /mnt/usb:/data wahyd4/aria2-ui:arm64
</code></pre>
<h3 id="leanote-nodb部署方式">Leanote nodb部署方式</h3>
<ol>
<li>部署无db版leanote</li>
</ol>
<pre><code>docker run -d --name leanote -p 10086:9000  --restart=always -v /root/dockerAppData/leanote:/data/leanote/conf  axboy/leanote:nodb-arm
</code></pre>
<ol start="2">
<li>单独部署数据库</li>
</ol>
<blockquote>
<p>mongodb</p>
</blockquote>
<pre><code>docker run -p 27017:27017 --restart=always  --name mongo -v /root/dockerAppData/mongo:/data/db  arm64v8/mongo  --smallfiles
</code></pre>
<p><em>参考</em><br>
https://www.imooc.com/article/49225<br>
https://github.com/leanote/leanote/wiki/Leanote-%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%89%88%E8%AF%A6%E7%BB%86%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B----Mac-and-Linux#3-%E5%AF%BC%E5%85%A5%E5%88%9D%E5%A7%8B%E6%95%B0%E6%8D%AE</p>
<h3 id="plex-部署方式bridge">Plex 部署方式(bridge)</h3>
<pre><code>docker run --name=plex -p 32400:32400/tcp -p 3005:3005/tcp -p 8324:8324/tcp -p 32469:32469/tcp -p 1900:1900/udp -p 32410:32410/udp -p 32412:32412/udp -p 32413:32413/udp -p 32414:32414/udp  -e PUID=0 -e PGID=0 -e VERSION=docker -e TZ=&quot;Asia/Shanghai&quot; -e ALLOWED_NETWORKS=&quot;192.168.2.0/24&quot; -h PlexDocker -v  /root/dockerAppData/plex:/config -v /mnt/usb/Movies:/data/tvshows -v /mnt/usb/Movies:/data/movies -v /root/dockerAppData/plex/transcode:/transcode --restart=always linuxserver/plex:arm64v8-latest
</code></pre>
<ul>
<li>运行成功修改</li>
</ul>
<pre><code>/root/dockerAppData/plex/Library/Application Support/Plex Media Server/Preferences.xml . 添加 allowedNetworks=&quot;192.168.2.0/24&quot;
</code></pre>
<p>--https://github.com/plexinc/pms-docker</p>
<h3 id="portainer">Portainer</h3>
<pre><code>docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock  --name portainer portainer/portainer
</code></pre>
<h3 id="docker-gateway旁路ssr">docker-gateway旁路（ssr）</h3>
<pre><code>docker run --restart always -d --name gateway --network macnet --ip 192.168.2.2 --privileged -v /root/dockerAppData/gateway:/root bettermanbao/docker-gateway:aarch64-0.0.2
</code></pre>
<h3 id="迅雷离线">迅雷离线</h3>
<pre><code>docker run --name xware -v /mnt/usb/Downloads/xunleiDownloads:/data -d v8ok/n1-docker-xware
</code></pre>
<h3 id="heimdal部署">Heimdal部署</h3>
<pre><code>docker run --name heimdal -e PUID=1000 -e PGID=1000 -e TZ=Asia/Shanghai -p 880:80 -p 8443:443 -v /root/dockerAppData/heimdal:/config --restart=always linuxserver/heimdall:arm64v8-latest
</code></pre>
<h3 id="gogs部署">Gogs部署</h3>
<pre><code>docker run --name=gogs -p 10022:22 -p 10080:3000 -v /root/dockerAppData/gogs:/data autarchprinceps/gogs-arm64:latest
</code></pre>
<h3 id="openwrtgateway">openwrtgateway</h3>
<pre><code>docker run --restart always -d --network macnet --privileged kanshudj/n1-openwrtgateway /sbin/init
</code></pre>
<p>--https://hub.docker.com/r/kanshudj/n1-openwrtgateway</p>
<h3 id="netdata">netdata</h3>
<pre><code>docker run -d --name=netdata --restart unless-stopped  -p 19999:19999 -v /proc:/host/proc:ro -v /sys:/host/sys:ro -v /var/run/docker.sock:/var/run/docker.sock:ro --cap-add SYS_PTRACE --security-opt apparmor=unconfined netdata/netdata:lastst-aarch64
</code></pre>
<h3 id="nextcloud">nextCloud</h3>
<pre><code>docker run -it -p 5555:80 --name nextcloud -v /media:/var/www/html/data/ -v /mnt:/mnt --restart=always --privileged=true  arm64v8/nextcloud
</code></pre>
<blockquote>
<p>/etc/fstab里添加这句</p>
</blockquote>
<pre><code>/dev/sda1	/mnt		ntfs		defaults,noatime,nofail	    0 2
</code></pre>
<blockquote>
<p>这句是把外挂盘映射到docker里的 /mnt<br>
大致过程就是先fstab把移动硬盘先挂载到宿主机的/mnt，然后上面截图的语句把宿主的/mnt 挂载到 docker的 /mnt，这样就实现docker访问移动硬盘内容了</p>
</blockquote>
<h3 id="baidupcs-web">baidupcs-web</h3>
<pre><code>docker run -d --name baidupcs -p 5299:5299 -v /your/downloads:/downloads -v /your/config:/root/.config/BaiduPCS-Go 80x86/baidupcs:arm64-latest
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Aml(伪派)操作记录--小型nas]]></title>
        <id>http://note.geekju.cn//post/amlwei-pai-cao-zuo-ji-lu-xiao-xing-nas</id>
        <link href="http://note.geekju.cn//post/amlwei-pai-cao-zuo-ji-lu-xiao-xing-nas">
        </link>
        <updated>2019-05-30T13:16:54.000Z</updated>
        <summary type="html"><![CDATA[<p>N1翻车,决定要把手上的n1性能榨干</p>
]]></summary>
        <content type="html"><![CDATA[<p>N1翻车,决定要把手上的n1性能榨干</p>
<!-- more -->
<ul>
<li></li>
</ul>
<h1 id="bypy下载百度网盘内容到树莓派">bypy下载百度网盘内容到树莓派</h1>
<p>nohup bypy downdir java &gt;/root/bypylog 2&gt;&amp;1 &amp;</p>
<h1 id="frp服务器启动">frp服务器启动</h1>
<p>nohup /root/frp/frp_0.21.0_linux_amd64/frps -c /root/frp/frp_0.21.0_linux_amd64/frps.ini &gt;/root/logs/frps 2&gt;&amp;1 &amp;</p>
<h1 id="上传到od">上传到od</h1>
<p>nohup /root/odupload.sh /mnt/usb/Pictures/ &gt;/root/log 2&gt;&amp;1 &amp;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac终端设置代理]]></title>
        <id>http://note.geekju.cn//post/mac-zhong-duan-she-zhi-dai-li</id>
        <link href="http://note.geekju.cn//post/mac-zhong-duan-she-zhi-dai-li">
        </link>
        <updated>2019-05-07T07:50:18.000Z</updated>
        <content type="html"><![CDATA[<p>使用酸酸乳开启代理，只支持浏览器开启代理，其他软件是不能够开启代理的，总结如下：<br>
一：开启酸酸乳，打开自动代理模式，选择节点。　　<br>
二：打开终端，用 vim 打开 .zshrc（zsh用户）或 .base_profile（bash用户）：</p>
<pre><code>vim ~/.zshrc
</code></pre>
<p>最底行插入：</p>
<pre><code>alias proxy='export all_proxy=socks5://127.0.0.1:1080' 
alias unproxy='unset all_proxy'
</code></pre>
<p>:wq保存退出。</p>
<pre><code>source ~/.zshrc
</code></pre>
<p>关闭代理：<br>
<code>unproxy 或者关闭终端窗口.该设置只对当前终端窗口生效,重启终端失效</code></p>
]]></content>
    </entry>
</feed>